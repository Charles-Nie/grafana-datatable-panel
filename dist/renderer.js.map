{"version":3,"sources":["../src/renderer.js"],"names":["$","kbn","moment","DataTable","DatatableRenderer","panel","table","isUtc","sanitize","formatters","colorState","value","style","thresholds","i","length","colors","_","first","v","undefined","isArray","join","escape","column","defaultCellFormatter","type","date","utc","format","dateFormat","valueFormatter","valueFormats","unit","isString","colorMode","getColorForValue","decimals","colIndex","styles","columns","regex","stringToJsRegex","pattern","text","match","createColumnFormatter","rowData","formattedRowData","y","row","rows","cellData","push","formatColumnValue","columnDefs","_this","title","td","col","items","split","bgColor","color","isNaN","cell","css","parentNode","children","should_destroy","fn","dataTable","isDataTable","aDT","destroy","empty","err","console","log","message","formattedData","generateFormattedData","newDT","data"],"mappings":"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","file":"renderer.js","sourcesContent":["import $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport moment from 'moment';\nimport DataTable from './libs/datatables.net/js/jquery.dataTables.min.js';\n\nexport class DatatableRenderer {\n  constructor(panel, table, isUtc, sanitize) {\n    this.formatters = [];\n    this.colorState = {};\n    this.panel = panel;\n    this.table = table;\n    this.isUtc = isUtc;\n    this.sanitize = sanitize;\n  }\n\n  /**\n   * Given a value, return the color corresponding to the threshold set\n   * @param  {[Float]} value [Value to be evaluated]\n   * @param  {[Array]} style [Settings containing colors and thresholds]\n   * @return {[String]}       [color]\n   */\n  getColorForValue(value, style) {\n    if (!style.thresholds) {\n      return null;\n    }\n    for (var i = style.thresholds.length; i > 0; i--) {\n      if (value >= style.thresholds[i - 1]) {\n        return style.colors[i];\n      }\n    }\n    return _.first(style.colors);\n  }\n\n  /**\n   * [defaultCellFormatter description]\n   * @param  {[type]} v     [description]\n   * @param  {[type]} style [description]\n   * @return {[type]}       [description]\n   */\n  defaultCellFormatter(v, style) {\n    if (v === null || v === void 0 || v === undefined) {\n      return '';\n    }\n    if (_.isArray(v)) {\n      v = v.join(', ');\n    }\n    if (style && style.sanitize) {\n      return this.sanitize(v);\n    } else {\n      return _.escape(v);\n    }\n  }\n\n  /**\n   * [createColumnFormatter description]\n   * @param  {[type]} style  [description]\n   * @param  {[type]} column [description]\n   * @return {[type]}        [description]\n   */\n  createColumnFormatter(style, column) {\n    if (!style) {\n      return this.defaultCellFormatter;\n    }\n    if (style.type === 'hidden') {\n      return v => {\n        return undefined;\n      };\n    }\n    if (style.type === 'date') {\n      return v => {\n        if (v === undefined || v === null) {\n          return '-';\n        }\n        if (_.isArray(v)) {\n          v = v[0];\n        }\n        var date = moment(v);\n        if (this.isUtc) {\n          date = date.utc();\n        }\n        return date.format(style.dateFormat);\n      };\n    }\n    if (style.type === 'number') {\n      let valueFormatter = kbn.valueFormats[column.unit || style.unit];\n      return v => {\n        if (v === null || v === void 0) {\n          return '-';\n        }\n        if (_.isString(v)) {\n          return this.defaultCellFormatter(v, style);\n        }\n        if (style.colorMode) {\n          this.colorState[style.colorMode] = this.getColorForValue(v, style);\n        }\n        return valueFormatter(v, style.decimals, null);\n      };\n    }\n    return (value) => {\n      return this.defaultCellFormatter(value, style);\n    };\n  }\n\n  /**\n   * [formatColumnValue description]\n   * @param  {[type]} colIndex [description]\n   * @param  {[type]} value    [description]\n   * @return {[type]}          [description]\n   */\n  formatColumnValue(colIndex, value) {\n    if (this.formatters[colIndex]) {\n      return this.formatters[colIndex](value);\n    }\n\n    for (let i = 0; i < this.panel.styles.length; i++) {\n      let style = this.panel.styles[i];\n      let column = this.table.columns[colIndex];\n      var regex = kbn.stringToJsRegex(style.pattern);\n      if (column.text.match(regex)) {\n        this.formatters[colIndex] = this.createColumnFormatter(style, column);\n        return this.formatters[colIndex](value);\n      }\n    }\n\n    this.formatters[colIndex] = this.defaultCellFormatter;\n    return this.formatters[colIndex](value);\n  }\n\n  /**\n   * [generateFormattedData description]\n   * @param  {[type]} rowData [description]\n   * @return {[type]}         [description]\n   */\n  generateFormattedData(rowData) {\n    let formattedRowData = [];\n    for (var y = 0; y < rowData.length; y++) {\n      let row = this.table.rows[y];\n      let cellData = [];\n      for (var i = 0; i < this.table.columns.length; i++) {\n        cellData.push(this.formatColumnValue(i, row[i]));\n      }\n      formattedRowData.push(cellData);\n    }\n    return formattedRowData;\n  }\n  /**\n   * Construct table using Datatables.net API\n   *  multiple types supported\n   * timeseries_to_rows (column 0 = timestamp)\n   * timeseries_to_columns\n   * timeseries_aggregations - column 0 is the metric name (series name, not a timestamp)\n   * annotations - specific headers for this\n   * table\n   * json (raw)\n   * columns[x].type === \"date\" then set columndefs to parse the date, otherwise leave it as default\n   * convert table.columns[N].text to columns formatted to datatables.net format\n   * @return {[Boolean]} True if loaded without errors\n   */\n  render() {\n    if (this.table.columns.length === 0) return;\n    var columns = [];\n    var columnDefs = [];\n    var _this = this;\n    for (let i = 0; i < this.table.columns.length; i++) {\n      /* jshint loopfunc: true */\n      columns.push({\n        title: this.table.columns[i].text,\n        type: this.table.columns[i].type\n      });\n      if (this.table.columns[i].type === undefined) {\n        columnDefs.push(\n          {\n            \"targets\": i,\n            \"createdCell\": function (td, cellData, rowData, row, col) {\n              // pass the celldata to threshold checker\n              var items = cellData.split(/(\\s+)/);\n              // only color cell if the content is a number?\n              var bgColor = null;\n              var color = null;\n              // check if the content has a numeric value after the split\n              // color the cell as needed\n              if (!isNaN(items[0])) {\n                if (_this.colorState.cell) {\n                  bgColor = _this.colorState.cell;\n                  color = 'white';\n                  $(td).css('color', color);\n                  $(td).css('background-color', bgColor);\n                } else if (_this.colorState.value) {\n                  color = _this.colorState.value;\n                  $(td).css('color', color);\n                }\n              }\n              if (_this.colorState.row) {\n                bgColor = _this.colorState.row;\n                color = 'white';\n                // set the row using the parentNode\n                $(td.parentNode).children().css('color', color);\n                $(td.parentNode).children().css('background-color', bgColor);\n              }\n            }\n          }\n        );\n      }\n    }\n\n    try {\n      var should_destroy = false;\n      if ( $.fn.dataTable.isDataTable( '#datatable-panel-table')) {\n        should_destroy = true;\n      }\n      if (should_destroy) {\n        var aDT = $('#datatable-panel-table').DataTable();\n        aDT.destroy();\n        $('#datatable-panel-table').empty();\n      }\n    }\n    catch(err) {\n      console.log(\"Exception: \" + err.message);\n    }\n    // sanity check\n    // annotations come back as 4 items in an array per row. If the first row content is undefined, then modify to empty\n    // since datatables.net throws errors\n    if (this.table.rows[0].length === 4) {\n      if (this.table.rows[0][0] === undefined) {\n        // detected empty annotations\n        this.table.rows = [];\n      }\n    }\n    // pass the formatted rows into the datatable\n    var formattedData = this.generateFormattedData(this.table.rows);\n    var newDT = $('#datatable-panel-table').DataTable({\n      data: formattedData,\n      columns: columns,\n      columnDefs: columnDefs\n    });\n    console.log(\"Datatable Loaded!\");\n  }\n\n}\n"]}