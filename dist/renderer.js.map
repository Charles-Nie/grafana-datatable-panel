{"version":3,"sources":["../src/renderer.js"],"names":["$","kbn","DataTable","DatatableRenderer","panel","table","isUtc","sanitize","formatters","colorState","value","style","thresholds","i","length","colors","_","first","v","undefined","isArray","join","escape","column","defaultCellFormatter","type","date","moment","utc","format","dateFormat","valueFormatter","valueFormats","unit","isString","colorMode","getColorForValue","decimals","colIndex","styles","columns","regex","stringToJsRegex","pattern","text","match","createColumnFormatter","columnIndex","addWidthHack","formatColumnValue","cell","widthHack","hidden","page","pageSize","startPos","endPos","Math","min","rows","html","y","row","cellHtml","rowStyle","renderCell","new_row","push"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACAC,S;;AACAC,e;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAEMC,iB;AACX,mCAAYC,KAAZ,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCC,QAAjC,EAA2C;AAAA;;AACzC,eAAKC,UAAL,GAAkB,EAAlB;AACA,eAAKC,UAAL,GAAkB,EAAlB;AACA,eAAKL,KAAL,GAAaA,KAAb;AACA,eAAKC,KAAL,GAAaA,KAAb;AACA,eAAKC,KAAL,GAAaA,KAAb;AACA,eAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAED;;;;;;;;;;2CAMiBG,K,EAAOC,K,EAAO;AAC7B,gBAAI,CAACA,MAAMC,UAAX,EAAuB;AACrB,qBAAO,IAAP;AACD;;AAED,iBAAK,IAAIC,IAAIF,MAAMC,UAAN,CAAiBE,MAA9B,EAAsCD,IAAI,CAA1C,EAA6CA,GAA7C,EAAkD;AAChD,kBAAIH,SAASC,MAAMC,UAAN,CAAiBC,IAAI,CAArB,CAAb,EAAsC;AACpC,uBAAOF,MAAMI,MAAN,CAAaF,CAAb,CAAP;AACD;AACF;AACD,mBAAOG,EAAEC,KAAF,CAAQN,MAAMI,MAAd,CAAP;AACD;;;+CAQoBG,C,EAAGP,K,EAAO;AAC7B,gBAAIO,MAAM,IAAN,IAAcA,MAAM,KAAK,CAAzB,IAA8BA,MAAMC,SAAxC,EAAmD;AACjD,qBAAO,EAAP;AACD;;AAED,gBAAIH,EAAEI,OAAF,CAAUF,CAAV,CAAJ,EAAkB;AAChBA,kBAAIA,EAAEG,IAAF,CAAO,IAAP,CAAJ;AACD;;AAED,gBAAIV,SAASA,MAAMJ,QAAnB,EAA6B;AAC3B,qBAAO,KAAKA,QAAL,CAAcW,CAAd,CAAP;AACD,aAFD,MAEO;AACL,qBAAOF,EAAEM,MAAF,CAASJ,CAAT,CAAP;AACD;AACF;;;gDAQqBP,K,EAAOY,M,EAAQ;AAAA;;AACnC,gBAAI,CAACZ,KAAL,EAAY;AACV,qBAAO,KAAKa,oBAAZ;AACD;;AAED,gBAAIb,MAAMc,IAAN,KAAe,QAAnB,EAA6B;AAC3B,qBAAO,aAAK;AACV,uBAAON,SAAP;AACD,eAFD;AAGD;;AAED,gBAAIR,MAAMc,IAAN,KAAe,MAAnB,EAA2B;AACzB,qBAAO,aAAK;AACV,oBAAIP,MAAMC,SAAN,IAAmBD,MAAM,IAA7B,EAAmC;AACjC,yBAAO,GAAP;AACD;;AAED,oBAAIF,EAAEI,OAAF,CAAUF,CAAV,CAAJ,EAAkB;AAChBA,sBAAIA,EAAE,CAAF,CAAJ;AACD;AACD,oBAAIQ,OAAOC,OAAOT,CAAP,CAAX;AACA,oBAAI,MAAKZ,KAAT,EAAgB;AACdoB,yBAAOA,KAAKE,GAAL,EAAP;AACD;AACD,uBAAOF,KAAKG,MAAL,CAAYlB,MAAMmB,UAAlB,CAAP;AACD,eAbD;AAcD;;AAED,gBAAInB,MAAMc,IAAN,KAAe,QAAnB,EAA6B;AAAA;AAC3B,oBAAIM,iBAAiB9B,IAAI+B,YAAJ,CAAiBT,OAAOU,IAAP,IAAetB,MAAMsB,IAAtC,CAArB;;AAEA;AAAA,qBAAO,eAAK;AACV,wBAAIf,OAAM,IAAN,IAAcA,OAAM,KAAK,CAA7B,EAAgC;AAC9B,6BAAO,GAAP;AACD;;AAED,wBAAIF,EAAEkB,QAAF,CAAWhB,EAAX,CAAJ,EAAmB;AACjB,6BAAO,MAAKM,oBAAL,CAA0BN,EAA1B,EAA6BP,KAA7B,CAAP;AACD;;AAED,wBAAIA,MAAMwB,SAAV,EAAqB;AACnB,4BAAK1B,UAAL,CAAgBE,MAAMwB,SAAtB,IAAmC,MAAKC,gBAAL,CAAsBlB,EAAtB,EAAyBP,KAAzB,CAAnC;AACD;;AAED,2BAAOoB,eAAeb,EAAf,EAAkBP,MAAM0B,QAAxB,EAAkC,IAAlC,CAAP;AACD;AAdD;AAH2B;;AAAA;AAkB5B;;AAED,mBAAO,UAAC3B,KAAD,EAAW;AAChB,qBAAO,MAAKc,oBAAL,CAA0Bd,KAA1B,EAAiCC,KAAjC,CAAP;AACD,aAFD;AAGD;;;4CAQiB2B,Q,EAAU5B,K,EAAO;AACjC,gBAAI,KAAKF,UAAL,CAAgB8B,QAAhB,CAAJ,EAA+B;AAC7B,qBAAO,KAAK9B,UAAL,CAAgB8B,QAAhB,EAA0B5B,KAA1B,CAAP;AACD;;AAED,iBAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAI,KAAKT,KAAL,CAAWmC,MAAX,CAAkBzB,MAAtC,EAA8CD,GAA9C,EAAmD;AACjD,kBAAIF,QAAQ,KAAKP,KAAL,CAAWmC,MAAX,CAAkB1B,CAAlB,CAAZ;AACA,kBAAIU,SAAS,KAAKlB,KAAL,CAAWmC,OAAX,CAAmBF,QAAnB,CAAb;AACA,kBAAIG,QAAQxC,IAAIyC,eAAJ,CAAoB/B,MAAMgC,OAA1B,CAAZ;AACA,kBAAIpB,OAAOqB,IAAP,CAAYC,KAAZ,CAAkBJ,KAAlB,CAAJ,EAA8B;AAC5B,qBAAKjC,UAAL,CAAgB8B,QAAhB,IAA4B,KAAKQ,qBAAL,CAA2BnC,KAA3B,EAAkCY,MAAlC,CAA5B;AACA,uBAAO,KAAKf,UAAL,CAAgB8B,QAAhB,EAA0B5B,KAA1B,CAAP;AACD;AACF;;AAED,iBAAKF,UAAL,CAAgB8B,QAAhB,IAA4B,KAAKd,oBAAjC;AACA,mBAAO,KAAKhB,UAAL,CAAgB8B,QAAhB,EAA0B5B,KAA1B,CAAP;AACD;;;qCASUqC,W,EAAarC,K,EAA6B;AAAA,gBAAtBsC,YAAsB,uEAAP,KAAO;;AACnDtC,oBAAQ,KAAKuC,iBAAL,CAAuBF,WAAvB,EAAoCrC,KAApC,CAAR;AACA,gBAAIC,QAAQ,EAAZ;AACA,gBAAI,KAAKF,UAAL,CAAgByC,IAApB,EAA0B;AACxBvC,sBAAQ,8BAA8B,KAAKF,UAAL,CAAgByC,IAA9C,GAAqD,gBAA7D;AACA,mBAAKzC,UAAL,CAAgByC,IAAhB,GAAuB,IAAvB;AACD,aAHD,MAGO,IAAI,KAAKzC,UAAL,CAAgBC,KAApB,EAA2B;AAChCC,sBAAQ,mBAAmB,KAAKF,UAAL,CAAgBC,KAAnC,GAA2C,GAAnD;AACA,mBAAKD,UAAL,CAAgBC,KAAhB,GAAwB,IAAxB;AACD;;AAED;AACA;AACA;AACA,gBAAIyC,YAAY,EAAhB;AACA,gBAAIH,YAAJ,EAAkB;AAChBG,0BAAY,yCAAyC,KAAK9C,KAAL,CAAWmC,OAAX,CAAmBO,WAAnB,EAAgCH,IAAzE,GAAgF,QAA5F;AACD;;AAED,gBAAIlC,UAAUS,SAAd,EAAyB;AACvBR,sBAAQ,wBAAR;AACA,mBAAKN,KAAL,CAAWmC,OAAX,CAAmBO,WAAnB,EAAgCK,MAAhC,GAAyC,IAAzC;AACD,aAHD,MAGO;AACL,mBAAK/C,KAAL,CAAWmC,OAAX,CAAmBO,WAAnB,EAAgCK,MAAhC,GAAyC,KAAzC;AACD;;AAED,mBAAO,QAAQzC,KAAR,GAAgB,GAAhB,GAAsBD,KAAtB,GAA8ByC,SAA9B,GAA0C,OAAjD;AACD;;;iCAOME,I,EAAM;AACX,gBAAIC,WAAW,KAAKlD,KAAL,CAAWkD,QAAX,IAAuB,GAAtC;AACA,gBAAIC,WAAWF,OAAOC,QAAtB;AACA,gBAAIE,SAASC,KAAKC,GAAL,CAASH,WAAWD,QAApB,EAA8B,KAAKjD,KAAL,CAAWsD,IAAX,CAAgB7C,MAA9C,CAAb;AACA,gBAAI8C,OAAO,EAAX;;AAEA,iBAAK,IAAIC,IAAIN,QAAb,EAAuBM,IAAIL,MAA3B,EAAmCK,GAAnC,EAAwC;AACtC,kBAAIC,MAAM,KAAKzD,KAAL,CAAWsD,IAAX,CAAgBE,CAAhB,CAAV;AACA,kBAAIE,WAAW,EAAf;AACA,kBAAIC,WAAW,EAAf;AACA,mBAAK,IAAInD,IAAI,CAAb,EAAgBA,IAAI,KAAKR,KAAL,CAAWmC,OAAX,CAAmB1B,MAAvC,EAA+CD,GAA/C,EAAoD;AAClDkD,4BAAY,KAAKE,UAAL,CAAgBpD,CAAhB,EAAmBiD,IAAIjD,CAAJ,CAAnB,EAA2BgD,MAAMN,QAAjC,CAAZ;AACD;AACD,kBAAI,KAAK9C,UAAL,CAAgBqD,GAApB,EAAyB;AACvBE,2BAAW,8BAA8B,KAAKvD,UAAL,CAAgBqD,GAA9C,GAAoD,gBAA/D;AACA,qBAAKrD,UAAL,CAAgBqD,GAAhB,GAAsB,IAAtB;AACD;AACDF,sBAAQ,SAASI,QAAT,GAAoB,GAApB,GAA0BD,QAA1B,GAAqC,OAA7C;AACD;AACD,mBAAOH,IAAP;AACD;;;0CAMe;AACd,gBAAID,OAAO,EAAX;;AAEA,iBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAKxD,KAAL,CAAWsD,IAAX,CAAgB7C,MAApC,EAA4C+C,GAA5C,EAAiD;AAC/C,kBAAIC,MAAM,KAAKzD,KAAL,CAAWsD,IAAX,CAAgBE,CAAhB,CAAV;AACA,kBAAIK,UAAU,EAAd;AACA,mBAAK,IAAIrD,IAAI,CAAb,EAAgBA,IAAI,KAAKR,KAAL,CAAWmC,OAAX,CAAmB1B,MAAvC,EAA+CD,GAA/C,EAAoD;AAClDqD,wBAAQC,IAAR,CAAa,KAAKlB,iBAAL,CAAuBpC,CAAvB,EAA0BiD,IAAIjD,CAAJ,CAA1B,CAAb;AACD;AACD8C,mBAAKQ,IAAL,CAAUD,OAAV;AACD;AACD,mBAAO;AACL1B,uBAAS,KAAKnC,KAAL,CAAWmC,OADf;AAELmB,oBAAMA;AAFD,aAAP;AAID","file":"renderer.js","sourcesContent":["import $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport DataTable from './libs/datatables.net/js/jquery.dataTables.min.js';\n\nexport class DatatableRenderer {\n  constructor(panel, table, isUtc, sanitize) {\n    this.formatters = [];\n    this.colorState = {};\n    this.panel = panel;\n    this.table = table;\n    this.isUtc = isUtc;\n    this.sanitize = sanitize;\n  }\n\n  /**\n   * Given a value, return the color corresponding to the threshold set\n   * @param  {[Float]} value [Value to be evaluated]\n   * @param  {[Array]} style [Settings containing colors and thresholds]\n   * @return {[String]}       [color]\n   */\n  getColorForValue(value, style) {\n    if (!style.thresholds) {\n      return null;\n    }\n\n    for (var i = style.thresholds.length; i > 0; i--) {\n      if (value >= style.thresholds[i - 1]) {\n        return style.colors[i];\n      }\n    }\n    return _.first(style.colors);\n  }\n\n  /**\n   * [defaultCellFormatter description]\n   * @param  {[type]} v     [description]\n   * @param  {[type]} style [description]\n   * @return {[type]}       [description]\n   */\n  defaultCellFormatter(v, style) {\n    if (v === null || v === void 0 || v === undefined) {\n      return '';\n    }\n\n    if (_.isArray(v)) {\n      v = v.join(', ');\n    }\n\n    if (style && style.sanitize) {\n      return this.sanitize(v);\n    } else {\n      return _.escape(v);\n    }\n  }\n\n  /**\n   * [createColumnFormatter description]\n   * @param  {[type]} style  [description]\n   * @param  {[type]} column [description]\n   * @return {[type]}        [description]\n   */\n  createColumnFormatter(style, column) {\n    if (!style) {\n      return this.defaultCellFormatter;\n    }\n\n    if (style.type === 'hidden') {\n      return v => {\n        return undefined;\n      };\n    }\n\n    if (style.type === 'date') {\n      return v => {\n        if (v === undefined || v === null) {\n          return '-';\n        }\n\n        if (_.isArray(v)) {\n          v = v[0];\n        }\n        var date = moment(v);\n        if (this.isUtc) {\n          date = date.utc();\n        }\n        return date.format(style.dateFormat);\n      };\n    }\n\n    if (style.type === 'number') {\n      let valueFormatter = kbn.valueFormats[column.unit || style.unit];\n\n      return v => {\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        if (_.isString(v)) {\n          return this.defaultCellFormatter(v, style);\n        }\n\n        if (style.colorMode) {\n          this.colorState[style.colorMode] = this.getColorForValue(v, style);\n        }\n\n        return valueFormatter(v, style.decimals, null);\n      };\n    }\n\n    return (value) => {\n      return this.defaultCellFormatter(value, style);\n    };\n  }\n\n  /**\n   * [formatColumnValue description]\n   * @param  {[type]} colIndex [description]\n   * @param  {[type]} value    [description]\n   * @return {[type]}          [description]\n   */\n  formatColumnValue(colIndex, value) {\n    if (this.formatters[colIndex]) {\n      return this.formatters[colIndex](value);\n    }\n\n    for (let i = 0; i < this.panel.styles.length; i++) {\n      let style = this.panel.styles[i];\n      let column = this.table.columns[colIndex];\n      var regex = kbn.stringToJsRegex(style.pattern);\n      if (column.text.match(regex)) {\n        this.formatters[colIndex] = this.createColumnFormatter(style, column);\n        return this.formatters[colIndex](value);\n      }\n    }\n\n    this.formatters[colIndex] = this.defaultCellFormatter;\n    return this.formatters[colIndex](value);\n  }\n\n  /**\n   * [renderCell description]\n   * @param  {[type]}  columnIndex          [description]\n   * @param  {[type]}  value                [description]\n   * @param  {Boolean} [addWidthHack=false] [description]\n   * @return {[type]}                       [description]\n   */\n  renderCell(columnIndex, value, addWidthHack = false) {\n    value = this.formatColumnValue(columnIndex, value);\n    var style = '';\n    if (this.colorState.cell) {\n      style = ' style=\"background-color:' + this.colorState.cell + ';color: white\"';\n      this.colorState.cell = null;\n    } else if (this.colorState.value) {\n      style = ' style=\"color:' + this.colorState.value + '\"';\n      this.colorState.value = null;\n    }\n\n    // because of the fixed table headers css only solution\n    // there is an issue if header cell is wider the cell\n    // this hack adds header content to cell (not visible)\n    var widthHack = '';\n    if (addWidthHack) {\n      widthHack = '<div class=\"table-panel-width-hack\">' + this.table.columns[columnIndex].text + '</div>';\n    }\n\n    if (value === undefined) {\n      style = ' style=\"display:none;\"';\n      this.table.columns[columnIndex].hidden = true;\n    } else {\n      this.table.columns[columnIndex].hidden = false;\n    }\n\n    return '<td' + style + '>' + value + widthHack + '</td>';\n  }\n\n  /**\n   * [render description]\n   * @param  {[type]} page [description]\n   * @return {[type]}      [description]\n   */\n  render(page) {\n    let pageSize = this.panel.pageSize || 100;\n    let startPos = page * pageSize;\n    let endPos = Math.min(startPos + pageSize, this.table.rows.length);\n    var html = \"\";\n\n    for (var y = startPos; y < endPos; y++) {\n      let row = this.table.rows[y];\n      let cellHtml = '';\n      let rowStyle = '';\n      for (var i = 0; i < this.table.columns.length; i++) {\n        cellHtml += this.renderCell(i, row[i], y === startPos);\n      }\n      if (this.colorState.row) {\n        rowStyle = ' style=\"background-color:' + this.colorState.row + ';color: white\"';\n        this.colorState.row = null;\n      }\n      html += '<tr ' + rowStyle + '>' + cellHtml + '</tr>';\n    }\n    return html;\n  }\n\n  /**\n   * [render_values description]\n   * @return {[type]} [description]\n   */\n  render_values() {\n    let rows = [];\n\n    for (var y = 0; y < this.table.rows.length; y++) {\n      let row = this.table.rows[y];\n      let new_row = [];\n      for (var i = 0; i < this.table.columns.length; i++) {\n        new_row.push(this.formatColumnValue(i, row[i]));\n      }\n      rows.push(new_row);\n    }\n    return {\n      columns: this.table.columns,\n      rows: rows,\n    };\n  }\n}\n"]}