{"version":3,"sources":["../src/renderer.js"],"names":["$","kbn","moment","DataTable","DatatableRenderer","panel","table","isUtc","sanitize","formatters","colorState","value","style","thresholds","i","length","colors","_","first","v","undefined","isArray","join","escape","column","defaultCellFormatter","type","date","utc","format","dateFormat","valueFormatter","valueFormats","unit","isString","colorMode","getColorForValue","decimals","colIndex","styles","columns","regex","stringToJsRegex","pattern","text","match","createColumnFormatter","columnIndex","addWidthHack","formatColumnValue","cell","widthHack","hidden","page","pageSize","startPos","endPos","Math","min","rows","html","y","row","cellHtml","rowStyle","renderCell","bgColor","color","backgroundColor","rowData","formattedRowData","cellData","push","dt","cellStyle","cellText","getCell","backGroundColor","rowContent","x","rowNode","add","draw","node","children","css","columnDefs","title","should_destroy","fn","dataTable","isDataTable","aDT","destroy","empty","err","console","log","message","formattedData","generateFormattedData","newDT","data","dataIndex","addClass"],"mappings":"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","file":"renderer.js","sourcesContent":["import $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport moment from 'moment';\nimport DataTable from './libs/datatables.net/js/jquery.dataTables.min.js';\n\nexport class DatatableRenderer {\n  constructor(panel, table, isUtc, sanitize) {\n    this.formatters = [];\n    this.colorState = {};\n    this.panel = panel;\n    this.table = table;\n    this.isUtc = isUtc;\n    this.sanitize = sanitize;\n  }\n\n  /**\n   * Given a value, return the color corresponding to the threshold set\n   * @param  {[Float]} value [Value to be evaluated]\n   * @param  {[Array]} style [Settings containing colors and thresholds]\n   * @return {[String]}       [color]\n   */\n  getColorForValue(value, style) {\n    if (!style.thresholds) {\n      return null;\n    }\n\n    for (var i = style.thresholds.length; i > 0; i--) {\n      if (value >= style.thresholds[i - 1]) {\n        return style.colors[i];\n      }\n    }\n    return _.first(style.colors);\n  }\n\n  /**\n   * [defaultCellFormatter description]\n   * @param  {[type]} v     [description]\n   * @param  {[type]} style [description]\n   * @return {[type]}       [description]\n   */\n  defaultCellFormatter(v, style) {\n    if (v === null || v === void 0 || v === undefined) {\n      return '';\n    }\n\n    if (_.isArray(v)) {\n      v = v.join(', ');\n    }\n\n    if (style && style.sanitize) {\n      return this.sanitize(v);\n    } else {\n      return _.escape(v);\n    }\n  }\n\n  /**\n   * [createColumnFormatter description]\n   * @param  {[type]} style  [description]\n   * @param  {[type]} column [description]\n   * @return {[type]}        [description]\n   */\n  createColumnFormatter(style, column) {\n    if (!style) {\n      return this.defaultCellFormatter;\n    }\n\n    if (style.type === 'hidden') {\n      return v => {\n        return undefined;\n      };\n    }\n\n    if (style.type === 'date') {\n      return v => {\n        if (v === undefined || v === null) {\n          return '-';\n        }\n\n        if (_.isArray(v)) {\n          v = v[0];\n        }\n        var date = moment(v);\n        if (this.isUtc) {\n          date = date.utc();\n        }\n        return date.format(style.dateFormat);\n      };\n    }\n\n    if (style.type === 'number') {\n      let valueFormatter = kbn.valueFormats[column.unit || style.unit];\n\n      return v => {\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        if (_.isString(v)) {\n          return this.defaultCellFormatter(v, style);\n        }\n\n        if (style.colorMode) {\n          this.colorState[style.colorMode] = this.getColorForValue(v, style);\n        }\n\n        return valueFormatter(v, style.decimals, null);\n      };\n    }\n\n    return (value) => {\n      return this.defaultCellFormatter(value, style);\n    };\n  }\n\n  /**\n   * [formatColumnValue description]\n   * @param  {[type]} colIndex [description]\n   * @param  {[type]} value    [description]\n   * @return {[type]}          [description]\n   */\n  formatColumnValue(colIndex, value) {\n    if (this.formatters[colIndex]) {\n      return this.formatters[colIndex](value);\n    }\n\n    for (let i = 0; i < this.panel.styles.length; i++) {\n      let style = this.panel.styles[i];\n      let column = this.table.columns[colIndex];\n      var regex = kbn.stringToJsRegex(style.pattern);\n      if (column.text.match(regex)) {\n        this.formatters[colIndex] = this.createColumnFormatter(style, column);\n        return this.formatters[colIndex](value);\n      }\n    }\n\n    this.formatters[colIndex] = this.defaultCellFormatter;\n    return this.formatters[colIndex](value);\n  }\n\n  /**\n   * [renderCell description]\n   * @param  {[type]}  columnIndex          [description]\n   * @param  {[type]}  value                [description]\n   * @param  {Boolean} [addWidthHack=false] [description]\n   * @return {[type]}                       [description]\n   */\n  renderCell(columnIndex, value, addWidthHack = false) {\n    value = this.formatColumnValue(columnIndex, value);\n    var style = '';\n    if (this.colorState.cell) {\n      style = ' style=\"background-color:' + this.colorState.cell + ';color: white\"';\n      this.colorState.cell = null;\n    } else if (this.colorState.value) {\n      style = ' style=\"color:' + this.colorState.value + '\"';\n      this.colorState.value = null;\n    }\n\n    // because of the fixed table headers css only solution\n    // there is an issue if header cell is wider the cell\n    // this hack adds header content to cell (not visible)\n    var widthHack = '';\n    if (addWidthHack) {\n      widthHack = '<div class=\"table-panel-width-hack\">' + this.table.columns[columnIndex].text + '</div>';\n    }\n\n    if (value === undefined) {\n      style = ' style=\"display:none;\"';\n      this.table.columns[columnIndex].hidden = true;\n    } else {\n      this.table.columns[columnIndex].hidden = false;\n    }\n\n    return '<td' + style + '>' + value + widthHack + '</td>';\n  }\n\n  /**\n   * [render description]\n   * @param  {[type]} page [description]\n   * @return {[type]}      [description]\n   */\n  NOTrender(page) {\n    let pageSize = this.panel.pageSize || 100;\n    let startPos = page * pageSize;\n    let endPos = Math.min(startPos + pageSize, this.table.rows.length);\n    var html = \"\";\n\n    for (var y = startPos; y < endPos; y++) {\n      let row = this.table.rows[y];\n      let cellHtml = '';\n      let rowStyle = '';\n      for (var i = 0; i < this.table.columns.length; i++) {\n        cellHtml += this.renderCell(i, row[i], y === startPos);\n      }\n      if (this.colorState.row) {\n        rowStyle = ' style=\"background-color:' + this.colorState.row + ';color: white\"';\n        this.colorState.row = null;\n      }\n      html += '<tr ' + rowStyle + '>' + cellHtml + '</tr>';\n    }\n    return html;\n  }\n\n  /**\n   * [renderCell description]\n   * @param  {[type]}  columnIndex          [description]\n   * @param  {[type]}  value                [description]\n   * @param  {Boolean} [addWidthHack=false] [description]\n   * @return {[type]}                       [description]\n   */\n  getCell(columnIndex, value) {\n    //debugger;\n    value = this.formatColumnValue(columnIndex, value);\n    var style = '';\n    var bgColor = null;\n    var color = null;\n    var hidden = false;\n    if (this.colorState.cell) {\n      bgColor = this.colorState.cell;\n      color = 'white';\n      this.colorState.cell = null;\n    } else if (this.colorState.value) {\n      color = this.colorState.value;\n      this.colorState.value = null;\n    }\n\n    if (value === undefined) {\n      hidden = true;\n      this.table.columns[columnIndex].hidden = true;\n    } else {\n      this.table.columns[columnIndex].hidden = false;\n    }\n    return {\n      backgroundColor : bgColor,\n      color: color,\n      hidden: hidden,\n      value : value\n    };\n    //return '<td' + style + '>' + value + '</td>';\n  }\n\n  generateFormattedData(rowData) {\n    let formattedRowData = [];\n    for (var y = 0; y < rowData.length; y++) {\n      let row = this.table.rows[y];\n\n      let cellData = [];\n      for (var i = 0; i < this.table.columns.length; i++) {\n        cellData.push(this.formatColumnValue(i, row[i]));\n      }\n\n      //let rowContent = [];\n      //for (let x = 0; x < cellData.length; x++) {\n      //  rowContent.push(cellData[x]);\n      //}\n      formattedRowData.push(cellData);\n    }\n    return formattedRowData;\n  }\n  populateTable(dt) {\n    for (var y = 0; y < this.table.rows.length; y++) {\n      let row = this.table.rows[y];\n      let cellHtml = '';\n      let rowStyle = '';\n\n      let cellStyle = '';\n      let cellText = '';\n      let cellData = [];\n      for (var i = 0; i < this.table.columns.length; i++) {\n        cellData.push(this.getCell(i, row[i]));\n      }\n      let rowData = {\n        backGroundColor: null,\n        color: null\n      };\n      if (this.colorState.row) {\n        rowData.backGroundColor = this.colorState.row;\n        rowData.color = 'white';\n        this.colorState.row = null;\n        //console.log('<tr ' + rowStyle + '>' + cellHtml + '</tr>');\n      }\n      // now append to the datatable\n      //console.log(cellData, rowData);\n      // collapse cellData values into a row\n      let rowContent = [];\n      for (let x = 0; x < cellData.length; x++) {\n        rowContent.push(cellData[x].value);\n      }\n      //console.log(rowContent);\n      var rowNode = dt\n        .row.add( rowContent )\n        .draw()\n        .node();\n\n      if (rowData.backGroundColor) {\n        // have to add style to children to color the whole row\n        $( rowNode )\n          .children()\n          .css( 'background-color', rowData.backGroundColor )\n          .css( 'color', rowData.color );\n      }\n      //$( rowNode )\n      //  .css( 'color', 'red' )\n      //  .animate( { color: 'black' } );\n      //console.log('<tr ' + rowStyle + '>' + cellHtml + '</tr>');\n    }\n  }\n  /**\n   * Construct table using Datatables.net API\n   * @return {[Boolean]} True if loaded without errors\n   */\n  render() {\n    if (this.table.columns.length === 0) return;\n    // multiple types here\n    // timeseries_to_rows (column 0 = timestamp)\n    // timeseries_to_columns\n    // timeseries_aggregations - column 0 is the metric name (series name, not a timestamp)\n    // annotations - specific headers for this\n    // table\n    // json (raw)\n    // columns[x].type === \"date\" then set columndefs to parse the date, otherwise leave it as default\n    // convert table.columns[N].text to columns formatted to datatables.net format\n    var columns = [];\n    var columnDefs = [];\n    for (let i = 0; i < this.table.columns.length; i++) {\n      /* jshint loopfunc: true */\n      columns.push({\n        title: this.table.columns[i].text,\n        type: this.table.columns[i].type\n      });\n    }\n\n    try {\n      var should_destroy = false;\n      if ( $.fn.dataTable.isDataTable( '#datatable-panel-table')) {\n        should_destroy = true;\n      }\n      if (should_destroy) {\n        var aDT = $('#datatable-panel-table').DataTable();\n        aDT.destroy();\n        $('#datatable-panel-table').empty();\n      }\n    }\n    catch(err) {\n      console.log(\"Exception: \" + err.message);\n    }\n    // sanity check\n    // annotations come back as 4 items in an array per row. If the first row content is undefined, then modify to empty\n    // since datatables.net throws errors\n    if (this.table.rows[0].length === 4) {\n      if (this.table.rows[0][0] === undefined) {\n        // detected empty annotations\n        this.table.rows = [];\n      }\n    }\n    // pass the formatted rows into the datatable\n    //var formattedData = [];\n    var formattedData = this.generateFormattedData(this.table.rows);\n    var newDT = $('#datatable-panel-table').DataTable({\n      data: formattedData,\n      columns: columns,\n      \"createdRow\": function( row, data, dataIndex ) {\n        //console.log(\"row data = \" + data[1]);\n        // color row/cell according to threshold settings\n        if ( data[1] >= 1000 ) {\n          $(row).addClass( 'threshold-ok' );\n        }\n      }\n    });\n\n    //this.populateTable(newDT);\n    console.log(\"Datatable Loaded!\");\n  }\n\n}\n"]}